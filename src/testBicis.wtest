import bicis.*
import depositos.*
import accesorios.*

describe "Ejemplos de bicis" {
	const bici1 = new Bicicleta(rodado=28, largo=150, marca="Olmo", accesorios = [farolito])
	const bici2 = new Bicicleta(rodado=26, largo=110, marca="Legnano", accesorios = [farolito, canasto, morralDeBici])
	const bici3 = new Bicicleta(rodado=20, largo=90, marca="Legnano", accesorios = [morralDeBici])
	
	const deposito1 = new Deposito(bicisAlmacenadas=[bici1, bici2, bici3])
	const deposito2 = new Deposito(bicisAlmacenadas=[bici1, bici2])
	
	method bici2() {
		canasto.volumen(8)
		morralDeBici.largo(21)
		morralDeBici.tieneOjoDeGato(true)
	}
	
	method bici3() {
		morralDeBici.largo(6)
		morralDeBici.tieneOjoDeGato(false)
	}

test "Bici 1" {
	assert.equals(85, bici1.altura())
	assert.equals(34, bici1.velocidadDeCrucero())
	assert.equals(0, bici1.carga())
	assert.equals(14.5, bici1.peso())
	assert.that(bici1.tieneLuz())
	assert.equals(1, bici1.cantAccesoriosLivianos())
}

test "Bici 2" {
	self.bici2()
	
	assert.equals(80, bici2.altura())
	assert.equals(28, bici2.velocidadDeCrucero())
	assert.equals(23, bici2.carga())
	assert.equals(15.5, bici2.peso())
	assert.that(bici2.tieneLuz())
	assert.equals(2, bici2.cantAccesoriosLivianos())
}

test "Bici 3" {
	self.bici3()
	
	assert.equals(65, bici3.altura())
	assert.equals(22, bici3.velocidadDeCrucero())
	assert.equals(2, bici3.carga())
	assert.equals(11.2, bici3.peso())
	assert.notThat(bici3.tieneLuz())
	assert.equals(0, bici3.cantAccesoriosLivianos())
}

test "Test depósito 1" {
	self.bici2()
	self.bici3()
	
	assert.equals([bici1,bici2], deposito1.bicisRapidas())
	assert.equals(#{"Olmo","Legnano"}, deposito1.marcas())
	assert.notThat(deposito1.esNocturno()) // → No funca
	assert.that(deposito1.tieneBiciParaLlevar(10))
	assert.notThat(deposito1.tieneBiciParaLlevar(50))
	}
	
test "Test depósito 2" {
	self.bici2()
	
	assert.that(deposito2.esNocturno())
}
	
}